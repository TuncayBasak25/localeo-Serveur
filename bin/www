#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('project-react-native-api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 var models = require('../models');
 var fs = require('fs');

 models.sequelize.sync({ force: true })
 .then( async () => {
   const db = require('../models/index');
   const tuncay = await db.User.create({
     username: 'tuncay',
     email: 'tuncay.basak@outlook.com',
     password: '14531453',
     role: 'admin'
   });
   
   const olivier = await db.User.create({
     username: 'olivier',
     email: 'olivier@outlook.com',
     password: 'benlaura',
     role: 'admin'
   });

   await tuncay.createUserInfo({
     firstname: 'Tuncay',
     lastname: 'Basak',
     phone: '0204081499',
     adress: 'my adress',
     geolocation: JSON.stringify({
       lattitude: 46.987179,
       longitude: 3.161600
     })
   });

   let avatar = await fs.readFileSync('./src/avatar/tuncay.jpg');
   await tuncay.createAvatar({ data: avatar });

   let articleImages = [
     await fs.readFileSync('./src/article/destroyer.jpg'),
     await fs.readFileSync('./src/article/galaxyA40.jpg'),
     await fs.readFileSync('./src/article/usbkey.jpg'),
     await fs.readFileSync('./src/article/watch.jpg')
   ];

   let articleTitle = [
     'Destroyer class XQR3580',
     'Galaxy A40 comme neuf',
     'Clé usb fonctionnelle 16Gb',
     'Montre couleur bronze'
   ];

   let articleDescription = [
     'Destroyer en bon état, année 3483',
     'Téléphone comme neuf.',
     'Usb fonctionnelle.',
     'Montre comme neuf.'
   ];

   let articlePrice = [
     950,
     125,
     5,
     230
   ];

   let articleGeolocation = [
     JSON.stringify({
       lattitude: 46.787179,
       longitude: 3.461600
     }),
     JSON.stringify({
       lattitude: 46.687179,
       longitude: 3.761600
     }),
     JSON.stringify({
       lattitude: 46.487179,
       longitude: 3.361600
     }),
     JSON.stringify({
       lattitude: 46.987179,
       longitude: 3.161600
     })
   ];

   let articleCategories = [
     JSON.stringify({
       spaceship: true
     }),
     JSON.stringify({
       smartphone: true,
       technologie: true
     }),
     JSON.stringify({
       technologie: true
     }),
     JSON.stringify({
       accessoire: true
     }),
   ];

   for (let i=0; i<articlePrice.length; i++)
   {
     let image = { data: articleImages[i] };
     let article = {
       title: articleTitle[i],
       description: articleDescription[i],
       price: articlePrice[i],
       geolocation: articleGeolocation[i],
       categories: articleCategories[i]
     }

     article = await tuncay.createArticle(article);
     //article = await db.Article.create(article);

     await article.createImage(image);
   }

   server.listen(port, () => {
     debug('Express server listening on port ' + server.address().port);
   });

   server.on('error', onError);
   server.on('listening', onListening);
 })
.catch(e => console.log(e));


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
